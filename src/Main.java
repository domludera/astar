import metadata.MetaData;
import astar.Spot;
import drawing.DrawingBoard;
import drawing.MyDrawable;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Dictionary;
import java.util.Hashtable;

import static astar.AStar.algo;
import static astar.AStar.linkNeighbors;
import static drawing.DrawingBoard.createGui;
import static java.awt.image.ImageObserver.ABORT;
import static pictureMapper.GetPixelColor.getBoolArr;
import static pictureMapper.GetPixelColor.getRGBarray;


public class Main {

    static final int w = 2;
    static final int h = 2;

    public static DrawingBoard gui;


    public static void main(String[] a) throws IOException, ParseException {


        String start = "H-903";
        String end = "H-961-21";
        String floor = "9";
        String path = "metadata/9th-floor-test";

        // converts existing metadata to JSON object
        MetaData.metaToJson(path, 9, "Hall");

        // open the converted JSON data into an object
        String pathToJSON = path+".json";
        JSONParser parser = new JSONParser();
        JSONObject floorJSON = (JSONObject) parser.parse(new FileReader(pathToJSON));

        JSONObject roomJSON = (JSONObject) floorJSON.get(floor);


        JSONObject startCoords = (JSONObject) roomJSON.get(start);
        JSONObject endCoords = (JSONObject) roomJSON.get(end);

        Dictionary startDict = minmaxXY(startCoords);
        Dictionary endDict = minmaxXY(endCoords);

        Dictionary[] startEnd = {startDict, endDict};

        System.out.println(startDict);
        System.out.println(endDict);

        int x1 = Math.toIntExact(((long) startEnd[0].get("maxX") - (long) startEnd[0].get("minX"))/2 + (long) startEnd[0].get("minX"));
        int y1 = Math.toIntExact(((long) startEnd[0].get("maxY") - (long) startEnd[0].get("minY"))/2 + (long) startEnd[0].get("minY"));
        int x2 = Math.toIntExact(((long) startEnd[1].get("maxX") - (long) startEnd[1].get("minX"))/2 + (long) startEnd[1].get("minX"));
        int y2 = Math.toIntExact(((long) startEnd[1].get("maxY") - (long) startEnd[1].get("minY"))/2 + (long) startEnd[1].get("minY"));
        System.out.println(x1);
        System.out.println(y1);
        System.out.println(x2);
        System.out.println(y2);


        try {
            Spot[][] grid = createGridFromMap("media/h9275.png", startEnd);
            drawMap(grid);
            linkNeighbors(grid);
            Spot walk = algo(grid, x1, y1, x2, y2);
            drawPath(walk);
            System.out.println("Done!");
        } catch (IOException e) {
            System.out.println("Image does not exist");
        }

    }


    public static Dictionary minmaxXY(JSONObject coords){
        // The min max default values are set
        // respectively to the 25x25 array size
        // generated by the metadata tool
        long minX = 25;
        long minY = 25;
        long maxX = 0;
        long maxY = 0;
        for(int i = 0; i<coords.size(); i++){
            JSONObject xy = (JSONObject) coords.get(String.valueOf(i));
            long x = (long) xy.get("x");
            long y = (long) xy.get("y");

            if(x<minX){
                minX = x;
            }
            if(x>maxX){
                maxX = x;
            }
            if(y<minY){
                minY = y;
            }
            if(y>maxY){
               maxY = y;
            }
        }

        Dictionary minmax = new Hashtable();
        minmax.put("minX", minX*11);
        minmax.put("maxX", (maxX*11)+11);
        minmax.put("minY", (minY*11)-11);
        minmax.put("maxY", maxY*11);

        return minmax;


    }

    public static Spot[][] createGridFromMap(String path, Dictionary[] startEnd) throws IOException {


        BufferedImage image = ImageIO.read(new File(path));

        int[][] result = getRGBarray(image);
        boolean[][] bool = getBoolArr(result, -534826);

        Spot[][] grid = new Spot[bool.length][bool[bool.length - 1].length];

            for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                    if(i<=Math.toIntExact((long)startEnd[0].get("maxX"))
                            && i>=Math.toIntExact((long)startEnd[0].get("minX"))
                            && j<=Math.toIntExact((long)startEnd[0].get("maxY"))
                            && j>=Math.toIntExact((long)startEnd[0].get("minY"))) {

                        grid[i][j] = new Spot(i, j, false);
                    }else if(i<=Math.toIntExact((long)startEnd[1].get("maxX"))
                                && i>=Math.toIntExact((long)startEnd[1].get("minX"))
                                && j<=Math.toIntExact((long)startEnd[1].get("maxY"))
                                && j>=Math.toIntExact((long)startEnd[1].get("minY"))){
                        grid[i][j] = new Spot(i, j, false);
                    }else{
                        grid[i][j] = new Spot(i, j, bool[i][j]);
                    }
                }
            }

        return grid;

    }

    public static void drawMap(Spot[][] grid) {
        gui = createGui(grid.length, grid[0].length);
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                MyDrawable gridSquare = new MyDrawable(new Rectangle(i * w, j * h, w, h), Color.BLACK, new BasicStroke(1), false);
                gui.addMyDrawable(gridSquare);

                if (grid[i][j].wall) {
                    MyDrawable blackSquare = new MyDrawable(new Rectangle(i * w, j * h, w, h), Color.BLACK, new BasicStroke(1), true);
                    gui.addMyDrawable(blackSquare);
                }
            }
        }
    }

    public static void drawPath(Spot curr) {
        while (curr != null) {
            MyDrawable blue = new MyDrawable(new Rectangle(curr.getX() * w, curr.getY() * h, w, h), new Color(0f, 0f, 1f, 1f), new BasicStroke(0), true);
            gui.addMyDrawable(blue);
            curr = curr.getPrevious();
        }

    }


}

